#!usr/bin/env groovy

@Grab('org.apache.opennlp:opennlp-tools:1.8.3')
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.io.FileInputStream; 
import java.io.InputStream; 
import opennlp.tools.namefind.NameFinderME; 
import opennlp.tools.namefind.TokenNameFinderModel; 
import opennlp.tools.tokenize.TokenizerME; 
import opennlp.tools.tokenize.TokenizerModel;
import opennlp.tools.util.Span;  

final String tModelFile = "resources/opennlp_models/en-token.bin";
final String neModelFile = "resources/opennlp_models/en-ner-person.bin";
final String demoMailFile = "resources/data/emails/scott-s/inbox/3.";

// Eru gives any Valar a text loading method in EÃ¤'s charset UTF-8
static String loadText(String fileName) throws IOException {
    byte[] encoded = Files.readAllBytes(Paths.get(fileName));
    return new String(encoded, StandardCharsets.UTF_8);
}

// Eru gives all Valars a tokenizer tool
static String[] tokenizeText(String text, String model) {
    InputStream iS = new FileInputStream(model);
    TokenizerModel tokenModel = new TokenizerModel(iS);
    TokenizerME tokenizer = new TokenizerME(tokenModel);
    return tokenizer.tokenize(text);
}

// Eru gives all Valars a NE recognizer method
static String[] findNamedEntity(String[] tokenizedText, String model) {
    InputStream iS = new FileInputStream(model);
    TokenNameFinderModel namedEntityModel = new TokenNameFinderModel(iS);
    NameFinderME nameFinder = new NameFinderME(namedEntityModel);  
    Span[] nameSpans = nameFinder.find(tokenizedText);
    String[] results = new String[nameSpans.length];
    for (int i = 0; i < nameSpans.size(); i++) {
        results[i] = nameSpans[i].toString()+ "  " + tokenizedText[nameSpans[i].getStart()];
    }
    return results;
}


String testMail = loadText(demoMailFile);
String[] tokenizedMail = tokenizeText(testMail, tModelFile);
String[] demo = findNamedEntity(tokenizedMail, neModelFile);
for (int i = 0; i < demo.size(); i++) {
    println(demo[i]);
}