#!usr/bin/env groovy
package tolkienizer
@Grab ('edu.stanford.nlp:stanford-corenlp:3.8.0')
@Grab ('edu.stanford.nlp:stanford-corenlp:3.8.0:models')
//@Grab ('org.slf4j:slf4j-log4j12:1.7.25') // for warnings
import edu.stanford.nlp.pipeline.*
import edu.stanford.nlp.pipeline.GenderAnnotator;
import edu.stanford.nlp.pipeline.RegexNERAnnotator;
import edu.stanford.nlp.util.CoreMap
import edu.stanford.nlp.trees.Tree
import edu.stanford.nlp.trees.TreeCoreAnnotations.TreeAnnotation
import edu.stanford.nlp.dcoref.CorefChain
import edu.stanford.nlp.semgraph.SemanticGraph
import edu.stanford.nlp.ling.CoreLabel
import edu.stanford.nlp.ling.CoreAnnotations.SentencesAnnotation
import edu.stanford.nlp.ling.CoreAnnotations.TokensAnnotation
import edu.stanford.nlp.ling.CoreAnnotations.TextAnnotation
import edu.stanford.nlp.ling.CoreAnnotations.PartOfSpeechAnnotation
import edu.stanford.nlp.ling.CoreAnnotations.NamedEntityTagAnnotation
import edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations.CollapsedCCProcessedDependenciesAnnotation
import edu.stanford.nlp.dcoref.CorefCoreAnnotations.CorefChainAnnotation
import java.util.*
import java.io.Writer
import java.io.FileWriter
import java.io.PrintWriter

props = new Properties()
props.setProperty("annotators", "tokenize, ssplit, pos, lemma, ner, regexner, gender")
props.setProperty("gender.maleNamesFile","edu/stanford/nlp/models/gender/male_first_names.txt");
props.setProperty("gender.femaleNamesFile","edu/stanford/nlp/models/gender/female_first_names.txt");
props.setProperty("regexner.mappings", "edu/stanford/nlp/models/regexner/type_map_clean");
pipeline = new StanfordCoreNLP(props)
text = "I want to ride my bicycle, Scott Kennedy and john lennon want to ride my bike"
document = new Annotation(text)
pipeline.annotate(document)
sentences = document.get(SentencesAnnotation)
sudonizer = new PersonSudonizer(new File("./resources/names.txt"))

for(sentence in sentences) {
    def firstName
    def lastName
    for (token in sentence.get(TokensAnnotation)) {
        // this is the text of the token
        word = token.get(TextAnnotation.class)
        // this is the POS tag of the token
        pos = token.get(PartOfSpeechAnnotation.class)
        // this is the NER label of the token
        ne = token.get(NamedEntityTagAnnotation.class)

        if (ne != "O") {
            if (firstName == null) {
                firstName = word
            } else {
                lastName = word
                person = new PersonWrapper(gender:"m", firstName:firstName, lastName:lastName)
                sudonized = sudonizer.addPerson(person)
                print "$sudonized.firstName $sudonized.lastName "
                firstName = null
                lastName = null
            }
        } else print "$word "
    }
    println ""
    tree = sentence.get(TreeAnnotation)
    dependencies = sentence.get(CollapsedCCProcessedDependenciesAnnotation)
}
graph = document.get(CorefChainAnnotation)
Writer w = new FileWriter("./out")
PrintWriter out = new PrintWriter(System.out)
pipeline.conllPrint(document, w)
pipeline.prettyPrint(document, out);
pipeline.run()